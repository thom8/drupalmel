<?php

/**
 * @file
 * Installation functions for DrupalMel core feature.
 */

/**
 * Implements hook_persistent_update().
 */
function drupalmel_core_persistent_update() {
  // Flush caches and revert features.
  _drupalmel_core_flush_revert();
}

/**
 * Helper function to flush caches and revert features.
 *
 * @param array $modules
 *   An array of modules to perform a hard refresh on.
 */
function _drupalmel_core_flush_revert($modules = array()) {
  if (empty($modules)) {
    $modules = basename(__FILE__, '.install');
  }
  if (!is_array($modules)) {
    $modules = array($modules);
  }

  $revert = array();
  foreach ($modules as $module) {
    $info = system_get_info('module', $module);

    // Enable all dependencies.
    module_enable($info['dependencies']);

    // Forcefully clear Features caches.
    module_load_include('inc', 'features', 'features.export');
    foreach (array_keys($info['features']) as $component) {
      if ($component == 'features_api') {
        continue;
      }

      features_get_components($component, NULL, TRUE);
      features_include_defaults($component, TRUE);
      features_get_default($component, $module, TRUE, TRUE);
    }

    // Exclude 'OAuth Connector providers' from reverted components.
    if (isset($info['features']['oauthconnector_provider'])) {
      unset($info['features']['oauthconnector_provider']);
    }

    // Build components list for feature revert.
    $revert[$module] = array_keys($info['features']);
  }

  // Flush Prepro cache.
  if (module_exists('prepro')) {
    cache_clear_all('prepro:map', 'cache_prepro');
  }

  // Flush all standard Drupal caches.
  drupal_flush_all_caches();

  // Revert features components.
  features_revert($revert);
}

/**
 * Enables persistent update module, runs this modules persistent update hook
 * and adds blog feeds.
 */
function drupalmel_core_update_7000() {
  // Enable persistent update module.
  module_enable(array('persistent_update'));

  // Run this modules persistent update hook.
  drupalmel_core_persistent_update();

  // Add blog feeds.
  $feeds = array(
    'Kattekrab' => 'http://kattekrab.net/taxonomy/term/322/feed',
    'Realityloop' => 'http://realityloop.com/tags/drupal-planet/feed',
  );
  foreach ($feeds as $name => $feed) {
    $node = new stdClass();
    $node->type = 'blog_feed';
    node_object_prepare($node);
    $node->title = $name;
    $node->feeds['FeedsHTTPFetcher']['source'] = $feed;
    node_save($node);
  }
}

/**
 * Adds Flink aka Rik deBoer's blog feed.
 */
function drupalmel_core_update_7001() {
  $node = new stdClass();
  $node->type = 'blog_feed';
  node_object_prepare($node);
  $node->title = 'Flink';
  $node->feeds['FeedsHTTPFetcher']['source'] = 'http://flink.com.au/taxonomy/term/1/feed';
  node_save($node);
}
